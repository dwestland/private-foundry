generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Todo {
  id          Int      @id @default(autoincrement())
  title       String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

    @@map("todo")
}

// NextAuth
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("account")
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
  @@map("verification_token")
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
  @@map("authenticator")
}

model Flag {
  id          Int      @id @default(autoincrement())
  name       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

    @@map("flag")
}

model Message {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())

  @@map("message")
}

// Property related tables
model Property {
  id                   Int              @id @default(autoincrement())
  street_address       String?
  zipcode              String?
  city                 String?
  state                String?
  building_id          String?
  listing_status       String?
  price                Float?
  display_name         String?
  business_name        String?
  phone_number         String?
  agent_badge_type     String?
  photo_url            String?
  profile_url          String?
  days_on_zillow       Int?
  updated_first_image  Boolean? @default(false)
  contacted_agent      Boolean? @default(false)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  other_images     OtherImage[]
  unstaged_images  UnstagedImage[]
  generated_images GeneratedImage[]

  @@map("property")
}

model OtherImage {
  id          Int      @id @default(autoincrement())
  property_id Int
  image_url   String
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@map("other_images")
}

model UnstagedImage {
  id              Int      @id @default(autoincrement())
  property_id     Int
  unstaged_images String
  property        Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now())

  @@map("unstaged_images")
}

model GeneratedImage {
  id          Int      @id @default(autoincrement())
  property_id Int
  image_url   String
  property    Property @relation(fields: [property_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())

  @@map("generated_images")
}
